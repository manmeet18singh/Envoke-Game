Coding Standards and Best Practices

Agreeing Members:
William Bowers
Matthew Steinhardt 
Manmeet Singh
Yashwant Patel
Nicholas Martin
Aiden Lucas

Purpose

To develop reliable and maintainable applications, you must follow coding standards and best practices.
The naming conventions, coding standards and best practices described in this document are compiled from our own experience. 
All team members are always expected to follow the coding standards and best practices.


** Folder Hierarchy **
Project Root
	Assets
   		Animations
   	 	Materials
   		Models
   		Music
   		Prefabs

			Enemies
   	 		World Objects
			UI
		Scenes
   			Levels
   		Scripts
   			Enemies
   		 	World Objects
   		 	UI and interface
   	 	SFX
   	 	Textures


** Commenting standards **

	Archived File header expectation:

		#region NAME
		////////////////////////////////////////////////////////////////////////////////
		// File name: <File name>
		//
		// Purpose: <Purpose description>
		//
		// Related Files: <File list>
		//
		// Author: <Author name>
		//
		// Created: <Creation data>
		//
		// Last Modified: <Date of last modification>
		////////////////////////////////////////////////////////////////////////////////
		#endregion

	Regular File header expectation:
		#region NAME
		////////////////////////////////////////////////////////////////////////////////
		/// Purpose: <Purpose description>
		///
		/// Author: <Author name>
		////////////////////////////////////////////////////////////////////////////////
		#endregion

	Primary method heading expectation:
		All methods directly pertaining to a specific game system must include the following header:

	#region NAME
		////////////////////////////////////////////////////////////////////////////////
		///	<function name>:
		///
		///	Purpose: <Purpose description>
		///
		///	Parameters: <Parameter type> <Parameter name>: 
		///				<Parameter description>
		///
		///	Return: <Return type> 
		///			<What is returned and what it is used for>
	#endregion

	Helper method heading expectation:
	All methods that don’t directly pertain to a specific game system or are reused in multiple systems should include the following:
	
	/// Purpose (MANDATORY):  <Purpose description>
	/// Parameters (Optional if name describes purpose): <Parameter description>
	/// Return (Optional if void, MANDATORY otherwise): <Return type>
							   <Description>




	Code block expectation:
	#region NAME
	///////////////////////////////////////////////////////
   	/// <short description on the purpose of a block of code>
        ///////////////////////////////////////////////////////
	#endregion
	

** Naming convention **

	Meaningful, descriptive words to name variables.
	Good:
		string mCharacterName;
		int mRow, mColumn;
		GameObject mSpawnedItem;
	Not Good:
		string mnam;
		int m_i,Mj;
		GameObject Temp;

	Capitalization expectation
		For method names we would utilize Pascal Case:

	MethodName()
		For local variables we would utilize Camel Case:

	variableName
		For member variables we would utilize Hungarian Case and denote them with an ‘m’ before the name of the variable:
		mMemberVariables

	Abbreviation use 
		Good: NavMesh (NavigationMesh)
		        posX
			dirX
		Bad:	
			x 
			y			
  			rb (rigid body)

	For general uses in Loops, i, j etc is OK.

	Parameters names:
		For parameter variable names they will begin with an underscore:

		Good: _num
		Bad: num


** Layout Conventions **	

	Indenting standard
		Tabs at the beginning of lines that are a subset of the previous line
		Example:
		if()
			Logic
		for (;;)
			Logic

	Curly braces ( {} ) format
	Separate  lines for curly braces and consistent use (even for single line contents)
	Example:
		main()
		{
			Code
		}

		If () 
		{
			logic
		}
		
	Blank line expectation:
		Blank lines to create code blocks between breaks in logic. We will utilize only 1 blank line
		Example:

		main()
		{
			Code
		}
		
		// comment
		If() 
		{
			logic
		}
		
		
	Spacing around operators
	Always include 1 space between operators and what they are operating on
		Example: 
		1 + 1 = 0

	Maximum characters per line
	100 characters per line

	Maximum nested conditions 
	Maximum of 3 nested conditions for the sake of space usage and easily followed logic
		Example:

		if ()
		{
 			if ()
			{
				if (you hit three if’s rethink your life)
				{
					code
				}
			}
		}

	Maximum lines per method
	Methods shouldn’t ever go over 200 lines, about a 100 lines should be great but think  about if you can condense the method into smaller methods over 100 lines. 

	Maximum lines per file
		No limit to lines in the file but break specific features to their own file
		Reassess code layout if the file exceeds 800 lines. 

	#region usage
		Use for code blocks
		Use to group related things together i.e. variables, unity api calls, custom          functions
		Example:
			#region NAME
			 ///////////////////////////////////////////////////////
   			 /// <short description on the purpose of a block of code>
   			 ///////////////////////////////////////////////////////
			#endregion
		
** Programming Practices **

Static values (hardcoded numbers. Const variables, and #defines)
	Any constant value should be handled with a #define rather than instances of the magic number on code

   	Example :
   		 #define pi 3.1415926

Commenting out code
	Commented out code should not be committed and pushed to the remote repository. All code should be cleaned before integration onto the repository.

	DRY practices (“Don’t Repeat Yourself")
The same piece of code should not be repeated over and over again.
Functions / Methods should be used for repeated functional code



              
